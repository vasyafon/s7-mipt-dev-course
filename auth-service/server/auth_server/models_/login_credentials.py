# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsm_auth_server.models.base_model_ import Model
from dsm_auth_server import util


class LoginCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, code_verifier: str=None, nonce: str=None, redirect_uri: str=None):
        """LoginCredentials - a model defined in OpenAPI

        :param code: The code of this LoginCredentials.
        :param code_verifier: The code_verifier of this LoginCredentials.
        :param nonce: The nonce of this LoginCredentials.
        :param redirect_uri: The redirect_uri of this LoginCredentials.
        """
        self.openapi_types = {
            'code': str,
            'code_verifier': str,
            'nonce': str,
            'redirect_uri': str
        }

        self.attribute_map = {
            'code': 'code',
            'code_verifier': 'codeVerifier',
            'nonce': 'nonce',
            'redirect_uri': 'redirectUri'
        }

        self._code = code
        self._code_verifier = code_verifier
        self._nonce = nonce
        self._redirect_uri = redirect_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginCredentials of this LoginCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this LoginCredentials.


        :return: The code of this LoginCredentials.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LoginCredentials.


        :param code: The code of this LoginCredentials.
        :type code: str
        """

        self._code = code

    @property
    def code_verifier(self):
        """Gets the code_verifier of this LoginCredentials.


        :return: The code_verifier of this LoginCredentials.
        :rtype: str
        """
        return self._code_verifier

    @code_verifier.setter
    def code_verifier(self, code_verifier):
        """Sets the code_verifier of this LoginCredentials.


        :param code_verifier: The code_verifier of this LoginCredentials.
        :type code_verifier: str
        """

        self._code_verifier = code_verifier

    @property
    def nonce(self):
        """Gets the nonce of this LoginCredentials.


        :return: The nonce of this LoginCredentials.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this LoginCredentials.


        :param nonce: The nonce of this LoginCredentials.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this LoginCredentials.


        :return: The redirect_uri of this LoginCredentials.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this LoginCredentials.


        :param redirect_uri: The redirect_uri of this LoginCredentials.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri
