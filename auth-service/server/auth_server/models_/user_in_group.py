# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsm_auth_server.models.base_model_ import Model
from dsm_auth_server import util


class UserInGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id: str=None, mode: str=None):
        """UserInGroup - a model defined in OpenAPI

        :param user_id: The user_id of this UserInGroup.
        :param mode: The mode of this UserInGroup.
        """
        self.openapi_types = {
            'user_id': str,
            'mode': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'mode': 'mode'
        }

        self._user_id = user_id
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInGroup of this UserInGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this UserInGroup.


        :return: The user_id of this UserInGroup.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserInGroup.


        :param user_id: The user_id of this UserInGroup.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def mode(self):
        """Gets the mode of this UserInGroup.


        :return: The mode of this UserInGroup.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this UserInGroup.


        :param mode: The mode of this UserInGroup.
        :type mode: str
        """
        allowed_values = ["READ", "WRITE", "ADMIN"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
