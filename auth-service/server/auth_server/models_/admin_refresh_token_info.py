# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsm_auth_server.models.base_model_ import Model
from dsm_auth_server.models.group_info import GroupInfo
from dsm_auth_server import util


class AdminRefreshTokenInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_id: str=None, token_name: str=None, expiration_date_time: datetime=None, groups: List[GroupInfo]=None):
        """AdminRefreshTokenInfo - a model defined in OpenAPI

        :param token_id: The token_id of this AdminRefreshTokenInfo.
        :param token_name: The token_name of this AdminRefreshTokenInfo.
        :param expiration_date_time: The expiration_date_time of this AdminRefreshTokenInfo.
        :param groups: The groups of this AdminRefreshTokenInfo.
        """
        self.openapi_types = {
            'token_id': str,
            'token_name': str,
            'expiration_date_time': datetime,
            'groups': List[GroupInfo]
        }

        self.attribute_map = {
            'token_id': 'tokenId',
            'token_name': 'tokenName',
            'expiration_date_time': 'expirationDateTime',
            'groups': 'groups'
        }

        self._token_id = token_id
        self._token_name = token_name
        self._expiration_date_time = expiration_date_time
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminRefreshTokenInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminRefreshTokenInfo of this AdminRefreshTokenInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_id(self):
        """Gets the token_id of this AdminRefreshTokenInfo.


        :return: The token_id of this AdminRefreshTokenInfo.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this AdminRefreshTokenInfo.


        :param token_id: The token_id of this AdminRefreshTokenInfo.
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def token_name(self):
        """Gets the token_name of this AdminRefreshTokenInfo.


        :return: The token_name of this AdminRefreshTokenInfo.
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this AdminRefreshTokenInfo.


        :param token_name: The token_name of this AdminRefreshTokenInfo.
        :type token_name: str
        """

        self._token_name = token_name

    @property
    def expiration_date_time(self):
        """Gets the expiration_date_time of this AdminRefreshTokenInfo.


        :return: The expiration_date_time of this AdminRefreshTokenInfo.
        :rtype: datetime
        """
        return self._expiration_date_time

    @expiration_date_time.setter
    def expiration_date_time(self, expiration_date_time):
        """Sets the expiration_date_time of this AdminRefreshTokenInfo.


        :param expiration_date_time: The expiration_date_time of this AdminRefreshTokenInfo.
        :type expiration_date_time: datetime
        """

        self._expiration_date_time = expiration_date_time

    @property
    def groups(self):
        """Gets the groups of this AdminRefreshTokenInfo.


        :return: The groups of this AdminRefreshTokenInfo.
        :rtype: List[GroupInfo]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this AdminRefreshTokenInfo.


        :param groups: The groups of this AdminRefreshTokenInfo.
        :type groups: List[GroupInfo]
        """

        self._groups = groups
