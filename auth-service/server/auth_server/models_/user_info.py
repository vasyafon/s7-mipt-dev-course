# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsm_auth_server.models.base_model_ import Model
from dsm_auth_server.models.group_info import GroupInfo
from dsm_auth_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id: str=None, global_role: str=None, groups: List[GroupInfo]=None):
        """UserInfo - a model defined in OpenAPI

        :param user_id: The user_id of this UserInfo.
        :param global_role: The global_role of this UserInfo.
        :param groups: The groups of this UserInfo.
        """
        self.openapi_types = {
            'user_id': str,
            'global_role': str,
            'groups': List[GroupInfo]
        }

        self.attribute_map = {
            'user_id': 'userId',
            'global_role': 'globalRole',
            'groups': 'groups'
        }

        self._user_id = user_id
        self._global_role = global_role
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInfo of this UserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this UserInfo.


        :return: The user_id of this UserInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserInfo.


        :param user_id: The user_id of this UserInfo.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def global_role(self):
        """Gets the global_role of this UserInfo.


        :return: The global_role of this UserInfo.
        :rtype: str
        """
        return self._global_role

    @global_role.setter
    def global_role(self, global_role):
        """Sets the global_role of this UserInfo.


        :param global_role: The global_role of this UserInfo.
        :type global_role: str
        """
        allowed_values = ["ADMIN", "USER"]  # noqa: E501
        if global_role not in allowed_values:
            raise ValueError(
                "Invalid value for `global_role` ({0}), must be one of {1}"
                .format(global_role, allowed_values)
            )

        self._global_role = global_role

    @property
    def groups(self):
        """Gets the groups of this UserInfo.


        :return: The groups of this UserInfo.
        :rtype: List[GroupInfo]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserInfo.


        :param groups: The groups of this UserInfo.
        :type groups: List[GroupInfo]
        """

        self._groups = groups
