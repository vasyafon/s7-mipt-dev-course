# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsm_auth_server.models.base_model_ import Model
from dsm_auth_server import util


class GroupInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: str=None, description: str=None, mode: str=None):
        """GroupInfo - a model defined in OpenAPI

        :param group_id: The group_id of this GroupInfo.
        :param description: The description of this GroupInfo.
        :param mode: The mode of this GroupInfo.
        """
        self.openapi_types = {
            'group_id': str,
            'description': str,
            'mode': str
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'description': 'description',
            'mode': 'mode'
        }

        self._group_id = group_id
        self._description = description
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupInfo of this GroupInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this GroupInfo.


        :return: The group_id of this GroupInfo.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupInfo.


        :param group_id: The group_id of this GroupInfo.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def description(self):
        """Gets the description of this GroupInfo.


        :return: The description of this GroupInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupInfo.


        :param description: The description of this GroupInfo.
        :type description: str
        """

        self._description = description

    @property
    def mode(self):
        """Gets the mode of this GroupInfo.


        :return: The mode of this GroupInfo.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GroupInfo.


        :param mode: The mode of this GroupInfo.
        :type mode: str
        """
        allowed_values = ["READ", "WRITE", "ADMIN"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
