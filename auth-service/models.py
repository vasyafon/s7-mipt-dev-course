# generated by datamodel-codegen:
#   filename:  authAPI.yaml
#   timestamp: 2020-11-02T07:09:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class LoginCredentials(BaseModel):
    code: Optional[str] = None
    code_verifier: Optional[str] = Field(None, alias='codeVerifier')
    nonce: Optional[str] = None
    redirect_uri: Optional[str] = Field(None, alias='redirectUri')


class TokenResponse(BaseModel):
    token: Optional[str] = None
    expires_at: Optional[datetime] = Field(None, alias='expiresAt')


class PublicKey(BaseModel):
    public_key: Optional[str] = Field(None, alias='publicKey')


class Mode(Enum):
    read = 'READ'
    write = 'WRITE'
    admin = 'ADMIN'


class GroupInfo(BaseModel):
    group_id: Optional[str] = Field(None, alias='groupId')
    description: Optional[str] = None
    mode: Optional[Mode] = None


class GlobalRole(Enum):
    admin = 'ADMIN'
    user = 'USER'


class UserInfo(BaseModel):
    user_id: Optional[str] = Field(None, alias='userId')
    global_role: Optional[GlobalRole] = Field(None, alias='globalRole')
    groups: Optional[List[GroupInfo]] = None


class UserInfoList(BaseModel):
    users: Optional[List[UserInfo]] = None


class ApiError(BaseModel):
    code: int
    message: str


class Mode1(Enum):
    read = 'READ'
    write = 'WRITE'
    admin = 'ADMIN'


class UserInGroup(BaseModel):
    user_id: Optional[str] = Field(None, alias='userId')
    mode: Optional[Mode1] = None


class GroupFull(BaseModel):
    group_id: Optional[str] = Field(None, alias='groupId')
    description: Optional[str] = None
    users: Optional[List[UserInGroup]] = None


class GroupList(BaseModel):
    groups: Optional[List[GroupFull]] = None


class GroupPost(BaseModel):
    group_id: Optional[str] = Field(None, alias='groupId')
    description: Optional[str] = None


class Tokens(BaseModel):
    refresh_token: Optional[TokenResponse] = Field(None, alias='refreshToken')
    access_token: Optional[TokenResponse] = Field(None, alias='accessToken')


class AdminRefreshTokenInfo(BaseModel):
    token_id: Optional[str] = Field(None, alias='tokenId')
    token_name: Optional[str] = Field(None, alias='tokenName')
    expiration_date_time: Optional[datetime] = Field(None, alias='expirationDateTime')
    groups: Optional[List[GroupInfo]] = None


class AdminRefreshTokenInfoPost(BaseModel):
    token_name: Optional[str] = Field(None, alias='tokenName')
    expiration_date_time: Optional[datetime] = Field(None, alias='expirationDateTime')
    groups: Optional[List[GroupInfo]] = None


class AdminRefreshTokenList(BaseModel):
    refresh_token_info: Optional[List[AdminRefreshTokenInfo]] = Field(
        None, alias='refreshTokenInfo'
    )
