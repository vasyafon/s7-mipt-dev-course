# coding: utf-8

"""
    Auth server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from auth_aiohttp_client.configuration import Configuration


class AdminRefreshTokenInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token_id': 'str',
        'token_name': 'str',
        'expiration_date_time': 'datetime',
        'groups': 'list[GroupInfo]'
    }

    attribute_map = {
        'token_id': 'tokenId',
        'token_name': 'tokenName',
        'expiration_date_time': 'expirationDateTime',
        'groups': 'groups'
    }

    def __init__(self, token_id=None, token_name=None, expiration_date_time=None, groups=None, local_vars_configuration=None):  # noqa: E501
        """AdminRefreshTokenInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._token_id = None
        self._token_name = None
        self._expiration_date_time = None
        self._groups = None
        self.discriminator = None

        if token_id is not None:
            self.token_id = token_id
        if token_name is not None:
            self.token_name = token_name
        if expiration_date_time is not None:
            self.expiration_date_time = expiration_date_time
        if groups is not None:
            self.groups = groups

    @property
    def token_id(self):
        """Gets the token_id of this AdminRefreshTokenInfo.  # noqa: E501


        :return: The token_id of this AdminRefreshTokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this AdminRefreshTokenInfo.


        :param token_id: The token_id of this AdminRefreshTokenInfo.  # noqa: E501
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def token_name(self):
        """Gets the token_name of this AdminRefreshTokenInfo.  # noqa: E501


        :return: The token_name of this AdminRefreshTokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this AdminRefreshTokenInfo.


        :param token_name: The token_name of this AdminRefreshTokenInfo.  # noqa: E501
        :type token_name: str
        """

        self._token_name = token_name

    @property
    def expiration_date_time(self):
        """Gets the expiration_date_time of this AdminRefreshTokenInfo.  # noqa: E501


        :return: The expiration_date_time of this AdminRefreshTokenInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date_time

    @expiration_date_time.setter
    def expiration_date_time(self, expiration_date_time):
        """Sets the expiration_date_time of this AdminRefreshTokenInfo.


        :param expiration_date_time: The expiration_date_time of this AdminRefreshTokenInfo.  # noqa: E501
        :type expiration_date_time: datetime
        """

        self._expiration_date_time = expiration_date_time

    @property
    def groups(self):
        """Gets the groups of this AdminRefreshTokenInfo.  # noqa: E501


        :return: The groups of this AdminRefreshTokenInfo.  # noqa: E501
        :rtype: list[GroupInfo]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this AdminRefreshTokenInfo.


        :param groups: The groups of this AdminRefreshTokenInfo.  # noqa: E501
        :type groups: list[GroupInfo]
        """

        self._groups = groups

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminRefreshTokenInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminRefreshTokenInfo):
            return True

        return self.to_dict() != other.to_dict()
